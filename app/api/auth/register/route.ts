import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { Resend } from 'resend'

const registerSchema = z.object({
  email: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  password: z.string().min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'),
  fullName: z.string().min(2, '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'),
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { email, password, fullName } = registerSchema.parse(body)

    console.log('Registration attempt:', { email, fullName })
    console.log('Resend API key exists:', !!process.env.RESEND_API_KEY)
    console.log('Resend API key starts with:', process.env.RESEND_API_KEY?.substring(0, 8))

    // TODO: Add actual user registration logic here
    // This would typically involve:
    // 1. Checking if user already exists
    // 2. Hashing the password
    // 3. Saving user to database
    
    // For now, let's send a welcome email via Resend
    console.log('Attempting to send email...')
    const resend = new Resend(process.env.RESEND_API_KEY)
    const emailResult = await resend.emails.send({
      from: 'ChecklyTool <noreply@resend.dev>',
      to: [email],
      subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChecklyTool!',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #1f2937; text-align: center;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChecklyTool!</h1>
          <p>–ü—Ä–∏–≤–µ—Ç, <strong>${fullName}</strong>!</p>
          <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ ChecklyTool - –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∫–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò.</p>
          
          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <p><strong>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</strong></p>
            <p>üìß Email: ${email}</p>
            <p>üë§ –ò–º—è: ${fullName}</p>
          </div>
          
          <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
          <ul>
            <li>‚úÖ –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞–±–æ—Ç—ã —à–∫–æ–ª—å–Ω–∏–∫–æ–≤</li>
            <li>ü§ñ –ü–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ò–ò</li>
            <li>üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</li>
            <li>‚ö° –≠–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</li>
          </ul>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="http://localhost:3000/auth/login" 
               style="background-color: #3b82f6; color: white; padding: 12px 24px; 
                      text-decoration: none; border-radius: 6px; display: inline-block;">
              –í–æ–π—Ç–∏ –≤ ChecklyTool
            </a>
          </div>
          
          <p style="color: #6b7280; font-size: 14px;">
            –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
          <p style="color: #9ca3af; font-size: 12px; text-align: center;">
            ChecklyTool - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —à–∫–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç<br>
            –≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
          </p>
        </div>
      `,
      text: `
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChecklyTool!
        
        –ü—Ä–∏–≤–µ—Ç, ${fullName}!
        
        –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ ChecklyTool - –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∫–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò.
        
        –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
        Email: ${email}
        –ò–º—è: ${fullName}
        
        –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
        - –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞–±–æ—Ç—ã —à–∫–æ–ª—å–Ω–∏–∫–æ–≤
        - –ü–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ò–ò
        - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        - –≠–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        
        –í–æ–π—Ç–∏ –≤ ChecklyTool: http://localhost:3000/auth/login
        
        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        
        ChecklyTool - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —à–∫–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç
      `,
    })

    console.log('Email sent successfully:', emailResult)
    
    if (emailResult.error) {
      console.error('Resend API error:', emailResult.error)
      throw new Error(`Resend API error: ${emailResult.error.message}`)
    }

    return NextResponse.json({
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.',
      success: true,
      emailId: emailResult.data?.id
    })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { message: error.issues[0]?.message || 'Validation error', success: false },
        { status: 400 }
      )
    }

    console.error('Registration error:', error)
    
    // Check if it's a Resend API error
    if (error instanceof Error) {
      return NextResponse.json(
        { 
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ${error.message}`, 
          success: false 
        },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', success: false },
      { status: 500 }
    )
  }
}