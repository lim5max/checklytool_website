'use client'

import React, { useState, useEffect, useMemo, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import { Input } from '@/components/ui/input'
import { Search, Plus, FileX } from 'lucide-react'
import { toast } from 'sonner'
import { SegmentControl } from '@/components/dashboard/segment-control'
import { CreateActionSheet } from '@/components/dashboard/create-action-sheet'
import { UnifiedListItem } from '@/components/dashboard/unified-list-item'
import { EmptyDashboard } from '@/components/dashboard/empty-dashboard'
import { DashboardStats } from '@/components/dashboard/dashboard-stats'

// –¢–∏–ø—ã
interface Check {
	id: string
	title: string
	created_at: string
	statistics?: {
		total_submissions: number
		average_score?: number
	}
}

interface Test {
	id: string
	title: string
	description?: string
	created_at: string
	question_count: number
}

interface UnifiedItem {
	id: string
	title: string
	type: 'check' | 'test'
	createdAt: string
	meta: {
		count?: number
		label?: string
		score?: number
	}
}

interface DashboardStats {
	total_checks: number
	total_submissions: number
	total_tests: number
}

const segments = [
	{ value: 'all', label: '–í—Å—ë', icon: 'üìã' },
	{ value: 'checks', label: '–ü—Ä–æ–≤–µ—Ä–∫–∏', icon: 'üéØ' },
	{ value: 'tests', label: '–¢–µ—Å—Ç—ã', icon: 'üìù' },
]

export default function DashboardPageNew() {
	const router = useRouter()

	// State
	const [allChecks, setAllChecks] = useState<Check[]>([])
	const [allTests, setAllTests] = useState<Test[]>([])
	const [stats, setStats] = useState<DashboardStats | null>(null)
	const [isLoading, setIsLoading] = useState(true)
	const [searchQuery, setSearchQuery] = useState('')
	const [activeSegment, setActiveSegment] = useState('all')
	const [isSheetOpen, setIsSheetOpen] = useState(false)

	// Pagination state
	const [displayCount, setDisplayCount] = useState(5)
	const ITEMS_PER_PAGE = 5

	// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: –æ–¥–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞)
	const loadData = useCallback(async () => {
		try {
			setIsLoading(true)

			const [checksRes, testsRes, statsRes] = await Promise.all([
				fetch('/api/checks?limit=100'),
				fetch('/api/tests/saved'),
				fetch('/api/dashboard/stats'),
			])

			if (checksRes.ok) {
				const data = await checksRes.json()
				setAllChecks(data.checks || [])
			}

			if (testsRes.ok) {
				const testsData = await testsRes.json()
				setAllTests(Array.isArray(testsData) ? testsData : [])
			}

			if (statsRes.ok) {
				const statsData = await statsRes.json()
				console.log('[DASHBOARD] Received stats data:', statsData)
				// API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { stats: { total_checks, ... } }
				setStats(statsData.stats || statsData)
			}
		} catch (error) {
			console.error('Error loading dashboard:', error)
			toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
		} finally {
			setIsLoading(false)
		}
	}, [])

	useEffect(() => {
		loadData()
	}, [loadData])

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
	useEffect(() => {
		const params = new URLSearchParams(window.location.search)
		const paymentStatus = params.get('payment')

		if (paymentStatus === 'success') {
			toast.success('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!', {
				description: '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.',
			})
			// –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
			window.history.replaceState({}, '', '/dashboard')
		} else if (paymentStatus === 'failed') {
			toast.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã', {
				description: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
			})
			// –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
			window.history.replaceState({}, '', '/dashboard')
		}
	}, [])

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	const unifiedItems = useMemo<UnifiedItem[]>(() => {
		const items: UnifiedItem[] = []

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
		allChecks.forEach((check) => {
			items.push({
				id: check.id,
				title: check.title,
				type: 'check',
				createdAt: check.created_at,
				meta: {
					count: check.statistics?.total_submissions || 0,
					label: '–£—á–µ–Ω–∏–∫–æ–≤',
					score: check.statistics?.average_score,
				},
			})
		})

		// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
		allTests.forEach((test) => {
			items.push({
				id: test.id,
				title: test.title,
				type: 'test',
				createdAt: test.created_at,
				meta: {
					count: test.question_count,
					label: '–í–æ–ø—Ä–æ—Å–æ–≤',
				},
			})
		})

		// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
		return items.sort(
			(a, b) =>
				new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
		)
	}, [allChecks, allTests])

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è (—Å—É–ø–µ—Ä–±—ã—Å—Ç—Ä–æ: < 1ms –¥–ª—è 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
	const filteredItems = useMemo(() => {
		let filtered = unifiedItems

		// –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
		if (activeSegment !== 'all') {
			const typeMap: Record<string, 'check' | 'test'> = {
				checks: 'check',
				tests: 'test',
			}
			filtered = filtered.filter((item) => item.type === typeMap[activeSegment])
		}

		// –ü–æ–∏—Å–∫
		if (searchQuery) {
			const query = searchQuery.toLowerCase()
			filtered = filtered.filter((item) =>
				item.title.toLowerCase().includes(query)
			)
		}

		return filtered
	}, [unifiedItems, activeSegment, searchQuery])

	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ displayCount —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	const visibleItems = useMemo(
		() => filteredItems.slice(0, displayCount),
		[filteredItems, displayCount]
	)

	const hasMore = filteredItems.length > displayCount

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
	const handleItemClick = useCallback(
		(id: string, type: 'check' | 'test', title?: string) => {
			if (type === 'check') {
				// –ü–µ—Ä–µ–¥–∞–µ–º title –≤ URL –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
				const encodedTitle = title ? encodeURIComponent(title) : ''
				const url = encodedTitle
					? `/dashboard/checks/${id}?title=${encodedTitle}`
					: `/dashboard/checks/${id}`
				router.push(url)
			} else {
				router.push(`/dashboard/tests/${id}`)
			}
		},
		[router]
	)

	const handleSearchChange = useCallback(
		(e: React.ChangeEvent<HTMLInputElement>) => {
			setSearchQuery(e.target.value)
			setDisplayCount(5) // –°–±—Ä–æ—Å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
		},
		[]
	)

	// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
	const loadMore = useCallback(() => {
		if (hasMore) {
			setDisplayCount((prev) => prev + ITEMS_PER_PAGE)
		}
	}, [hasMore, ITEMS_PER_PAGE])

	// –°–±—Ä–æ—Å displayCount –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
	useEffect(() => {
		setDisplayCount(5)
	}, [activeSegment])

	// –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
	if (!isLoading && unifiedItems.length === 0) {
		return <EmptyDashboard onCreateTest={() => setIsSheetOpen(true)} />
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞
	if (isLoading) {
		return (
			<div className="p-4 space-y-6">
				{/* –°–∫–µ–ª–µ—Ç–æ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
				<div className="bg-slate-50 rounded-[42px] p-7 animate-pulse">
					<div className="h-8 bg-slate-200 rounded w-48 mb-3"></div>
					<div className="h-16 bg-slate-200 rounded w-20"></div>
				</div>

				{/* –°–∫–µ–ª–µ—Ç–æ–Ω –∫–Ω–æ–ø–∫–∏ */}
				<div className="h-[72px] bg-slate-200 rounded-full animate-pulse"></div>

				{/* –°–∫–µ–ª–µ—Ç–æ–Ω segment */}
				<div className="h-12 bg-slate-200 rounded-full animate-pulse"></div>

				{/* –°–∫–µ–ª–µ—Ç–æ–Ω —Å–ø–∏—Å–∫–∞ */}
				{[...Array(3)].map((_, i) => (
					<div
						key={i}
						className="bg-slate-50 rounded-[42px] p-6 animate-pulse"
					>
						<div className="h-5 bg-slate-200 rounded w-3/4 mb-2"></div>
						<div className="h-4 bg-slate-200 rounded w-1/2"></div>
					</div>
				))}
			</div>
		)
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π UI
	return (
		<div className="p-4 space-y-6">
			{/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
			{stats && (
				<DashboardStats
					totalSubmissions={stats.total_submissions}
					totalChecks={stats.total_checks}
					totalTests={stats.total_tests}
				/>
			)}

			{/* FAB Button */}
			<button
				onClick={() => setIsSheetOpen(true)}
				className="w-full bg-[#096ff5] hover:bg-blue-600 transition-all active:scale-[0.98] text-white font-inter font-medium text-lg rounded-full h-[72px] flex items-center justify-center gap-2 shadow-lg"
			>
				<Plus className="w-6 h-6" />
				–°–æ–∑–¥–∞—Ç—å
			</button>

			{/* Segment Control */}
			<SegmentControl
				segments={segments}
				activeSegment={activeSegment}
				onChange={setActiveSegment}
			/>

			{/* –ü–æ–∏—Å–∫ */}
			<div className="relative">
				<Search className="absolute left-[21px] top-1/2 transform -translate-y-1/2 w-[18px] h-[18px] text-slate-500" />
				<Input
					placeholder="–ü–æ–∏—Å–∫..."
					value={searchQuery}
					onChange={handleSearchChange}
					className="pl-[49px] h-14 rounded-[27px] border-slate-100 bg-slate-50 font-inter font-medium"
				/>
			</div>

			{/* –°–ø–∏—Å–æ–∫ */}
			<div className="space-y-3">
				{filteredItems.length === 0 ? (
					<div className="text-center py-12">
						<FileX className="mx-auto h-12 w-12 text-slate-400 mb-4" />
						<h3 className="font-nunito font-bold text-lg text-slate-800 mb-2">
							–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
						</h3>
						<p className="text-slate-600 text-sm">
							{searchQuery
								? `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
								: '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'}
						</p>
					</div>
				) : (
					<>
						{/* –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
						{visibleItems.map((item) => (
							<UnifiedListItem
								key={`${item.type}-${item.id}`}
								{...item}
								onClick={handleItemClick}
							/>
						))}

						{/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" */}
						{hasMore && (
							<button
								onClick={loadMore}
								className="w-full bg-slate-100 hover:bg-slate-200 transition-colors text-slate-700 font-inter font-medium text-base rounded-full h-14 flex items-center justify-center gap-2"
							>
								–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ({filteredItems.length - displayCount})
							</button>
						)}

						{/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ */}
						{!hasMore && filteredItems.length > 5 && (
							<p className="text-center text-slate-500 text-sm py-4">
								–ü–æ–∫–∞–∑–∞–Ω–æ –≤—Å–µ {filteredItems.length}
							</p>
						)}
					</>
				)}
			</div>

			{/* Action Sheet */}
			<CreateActionSheet
				isOpen={isSheetOpen}
				onClose={() => setIsSheetOpen(false)}
			/>
		</div>
	)
}
