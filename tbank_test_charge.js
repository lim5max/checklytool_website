#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ T-Bank ‚Ññ6
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç Init ‚Üí Charge –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node tbank_test_charge.js
 */

const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è T-Bank
const TERMINAL_KEY = '1757689436304DEMO';
const PASSWORD = 'WFgr%waXvmeK3n%j';
const API_URL = 'https://securepay.tinkoff.ru/v2';

// RebillId –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
const REBILL_ID = '1761673723009';

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è T-Bank API
 */
function generateToken(params) {
	// –î–æ–±–∞–≤–ª—è–µ–º Password
	const paramsWithPassword = { ...params, Password: PASSWORD };

	// –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏
	const values = Object.keys(paramsWithPassword)
		.filter(key =>
			key !== 'Token' &&
			key !== 'Receipt' &&
			key !== 'DATA' &&
			paramsWithPassword[key] != null
		)
		.sort()
		.map(key => paramsWithPassword[key])
		.join('');

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SHA-256 —Ö–µ—à
	return crypto.createHash('sha256').update(values).digest('hex');
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Init –∑–∞–ø—Ä–æ—Å–∞
 */
async function initPayment() {
	console.log('\n[1] –í—ã–ø–æ–ª–Ω—è–µ–º Init –∑–∞–ø—Ä–æ—Å...\n');

	const orderId = `TEST_ORDER_${Date.now()}`;

	const params = {
		TerminalKey: TERMINAL_KEY,
		Amount: 10000, // 100 —Ä—É–±–ª–µ–π
		OrderId: orderId,
		Description: 'Test payment for recurrent charge',
		Recurrent: 'Y',
		CustomerKey: `test_customer_${Date.now()}`,
	};

	const token = generateToken(params);
	const body = { ...params, Token: token };

	console.log('Request:', JSON.stringify(body, null, 2));

	const response = await fetch(`${API_URL}/Init`, {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify(body),
	});

	const data = await response.json();

	console.log('\nResponse:', JSON.stringify(data, null, 2));

	if (!data.Success) {
		throw new Error(`Init failed: ${data.Message || data.ErrorCode}`);
	}

	console.log('\n‚úÖ Init —É—Å–ø–µ—à–µ–Ω!');
	console.log(`PaymentId: ${data.PaymentId}`);
	console.log(`PaymentURL: ${data.PaymentURL}`);

	return data.PaymentId;
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Charge –∑–∞–ø—Ä–æ—Å–∞
 */
async function chargePayment(paymentId) {
	console.log('\n[2] –í—ã–ø–æ–ª–Ω—è–µ–º Charge –∑–∞–ø—Ä–æ—Å...\n');

	const params = {
		TerminalKey: TERMINAL_KEY,
		PaymentId: paymentId,
		RebillId: REBILL_ID,
	};

	const token = generateToken(params);
	const body = { ...params, Token: token };

	console.log('Request:', JSON.stringify(body, null, 2));

	const response = await fetch(`${API_URL}/Charge`, {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify(body),
	});

	const data = await response.json();

	console.log('\nResponse:', JSON.stringify(data, null, 2));

	if (!data.Success) {
		throw new Error(`Charge failed: ${data.Message || data.ErrorCode}`);
	}

	console.log('\n‚úÖ Charge —É—Å–ø–µ—à–µ–Ω!');
	console.log(`Status: ${data.Status}`);
	console.log(`PaymentId: ${data.PaymentId}`);
	console.log(`Amount: ${data.Amount}`);

	return data;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
	try {
		console.log('='.repeat(60));
		console.log('–¢–ï–°–¢ T-BANK ‚Ññ6: Init ‚Üí Charge');
		console.log('='.repeat(60));

		// –®–∞–≥ 1: Init
		const paymentId = await initPayment();

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
		await new Promise(resolve => setTimeout(resolve, 1000));

		// –®–∞–≥ 2: Charge
		await chargePayment(paymentId);

		console.log('\n' + '='.repeat(60));
		console.log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
		console.log('='.repeat(60));
		console.log('\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ T-Bank:');
		console.log(`- PaymentId: ${paymentId}`);
		console.log(`- RebillId: ${REBILL_ID}`);
		console.log('='.repeat(60) + '\n');

	} catch (error) {
		console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
		console.error('\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error);
		process.exit(1);
	}
}

// –ó–∞–ø—É—Å–∫
main();
